/******************************************************************************

                            Online C Compiler.
                Code, Compile, Run and Debug C program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <stdio.h>
#define NODE 6
#define INF -9999
   int stk[100];
int MAXSIZE = 100; 
int top = -1;            

int isempty() {

   if(top == -1)
      return 1;
   else
      return 0;
}
   
int isfull() {

   if(top == MAXSIZE)
      return 1;
   else
      return 0;
}

int peek() {
   return stk[top];
}

void pop()
{
   int data;
	
   if(!isempty()) 
   {
      data = stk[top];
      top = top - 1;   
      
   } 
   else 
   {
      printf("Could not retrieve data, Stack is empty.\n");
   }
}

void push(int data) {

   if(!isfull()) {
      top = top + 1;   
      stk[top] = data;
   } else {
      printf("Could not insert data, Stack is full.\n");
   }
}

int cost[NODE][NODE] = {
   {0, 5, 3, INF, INF, INF},
   {INF, 0, 2, 6, INF, INF},
   {INF, INF, 0, 7, 4, 2},
   {INF, INF, INF, 0, -1, 1},
   {INF, INF, INF, INF, 0, -2},
   {INF, INF, INF, INF, INF, 0}
};

void topoSort(int u,int visited[]) {
   visited[u] = 1;    //set as the node v is visited

   for(int v = 0; v<NODE; v++) {
      if(cost[u][v]) {    //for allvertices v adjacent to u
         if(!visited[v])
            topoSort(v, visited);
      }
   }

   push(u);    //push starting vertex into the stack
}

void longestPath(int start) 
{
   int dist[NODE];
   int vis[NODE];

   for(int i = 0; i<NODE;i++)
      vis[i] = 0;    // make all nodes as unvisited at first
         
   for(int i = 0; i<NODE; i++)    //perform topological sort for vertices
      if(!vis[i])
         topoSort(i, vis);
               
   for(int i = 0; i<NODE; i++)
      dist[i] = INF;    //initially all distances are infinity
   dist[start] = 0;    //distance for start vertex is 0
   
   while(!isempty()) {    //when stack contains element, process in topological order
      int nextVert = peek(); 
      pop();

      if(dist[nextVert] != INF) {
         for(int v = 0; v<NODE; v++) {
            if(cost[nextVert][v] && cost[nextVert][v] != INF) {
               if(dist[v] < dist[nextVert] + cost[nextVert][v])
                  dist[v] = dist[nextVert] + cost[nextVert][v];
            }
         }
      }
   }
     
   for(int i = 0; i<NODE; i++)
      (dist[i] == INF)?printf("Infinity\n "):printf("%d\n",dist[i]);
}

main() {
   int start = 1;
   printf( "Longest Distance From Source Vertex=%d\n ",start);
   longestPath(start);
}